{"version":3,"sources":["components/Header/index.js","components/WeekForecast/index.js","components/currentForecast/index.js","components/Weather/index.js","utils/helpers.js","components/Body/index.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Header","WeekForecast","forecast","className","map","daily","date","src","icon","alt","description","minTemp","maxTemp","precipitation","humidity","CurrentForecast","currentTemp","windSpeed","Weather","currentForecast","weekForecast","formatDate","data","Date","moment","format","formatTemp","toFixed","currentWeatherForecast","current","dt","weather","temp","min","max","wind_speed","pop","sevenDayForecast","slice","Body","useState","setForecast","currentCity","setCurrentCity","useEffect","string","document","title","charAt","toUpperCase","apiKey","getCoord","city","a","coordAPI","axios","length","console","log","getForecast","lat","lon","weatherAPI","displayForecast","searchCity","event","preventDefault","res","coord","totalForecast","onSubmit","type","placeholder","id","value","onChange","target","onClick","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f42a29d4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n  return(\r\n    <header>\r\n      <h1>Weather Forecast</h1>\r\n      <h3>Please search below to view weather information</h3>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\n\nfunction WeekForecast({ forecast }) {\n  return(\n    <div className=\"d-flex flex-wrap justify-content-around\">\n      {forecast.map((daily) => (\n        <div className=\"card col-md-3\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\"><strong>{daily.date}</strong></h5>\n            <p><strong>Conditions:</strong> <img src={daily.icon} alt=\"forecast\" key={\"forecast-\" + daily.date} /> {daily.description}</p>\n            <p><strong>Minimum temperature:</strong> {daily.minTemp}</p>\n            <p><strong>Maximum temperature:</strong> {daily.maxTemp}</p>\n            <p><strong>Precipitation:</strong> {daily.precipitation}</p>\n            <p><strong>Humidity:</strong> {daily.humidity}</p>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n};\n\nexport default WeekForecast;","import React from 'react';\n\nfunction CurrentForecast({ forecast }) {\n  const { date, icon, description, currentTemp, minTemp, maxTemp, windSpeed, precipitation, humidity } = forecast;\n\n  return (\n    <div className=\"card justify-content-around\">\n    <div className=\"card-body\">\n      <h5 className=\"card-title\"><strong>{date}</strong></h5>\n      <p><strong>Conditions:</strong> <img src={icon} alt=\"forecast\" /> {description}</p>\n      <p><strong>Current temperature:</strong> {currentTemp}</p>\n      <p><strong>Minimum temperature:</strong> {minTemp}</p>\n      <p><strong>Maximum temperature:</strong> {maxTemp}</p>\n      <p><strong>Wind Speed:</strong> {windSpeed}</p>\n      <p><strong>Precipitation:</strong> {precipitation}</p>\n      <p><strong>Humidity:</strong> {humidity}</p>\n    </div>\n  </div>\n)};\n\nexport default CurrentForecast;","// weather component, will generate the weather for each day based on the city searched and post to the body\n\nimport React from 'react';\nimport WeekForecast from '../WeekForecast';\nimport CurrentForecast from '../currentForecast';\n\nfunction Weather({ forecast }) {\n  return(\n    <div>\n      <CurrentForecast forecast={forecast.currentForecast} />\n      <WeekForecast forecast={forecast.weekForecast} />\n    </div>\n  )\n}\n\nexport default Weather;","import moment from 'moment';\n\nexport function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nfunction formatDate(data) {\n  const date = new Date(data*1000);\n  const momentDate = (moment(date).format('L'));\n  return momentDate;\n};\n\nfunction formatTemp(data) {\n  const tempCelsius = (data - 273.15).toFixed(2)\n  return tempCelsius;\n};\n\nexport const currentWeatherForecast = data => ({\n  date: formatDate(data.current.dt),\n  icon: 'https://openweathermap.org/img/wn/' + data.current.weather[0].icon + '.png',\n  description: data.current.weather[0].description,\n  currentTemp: formatTemp(data.current.temp),\n  minTemp: formatTemp(data.daily[0].temp.min),\n  maxTemp: formatTemp(data.daily[0].temp.max),\n  windSpeed: data.current.wind_speed,\n  precipitation: data.daily[0].pop,\n  humidity: data.current.humidity\n});\n\nexport const sevenDayForecast = data => data.daily.slice(1).map((data) => ({\n  date: formatDate(data.dt),\n  icon: 'https://openweathermap.org/img/wn/' + data.weather[0].icon + '.png',\n  description: data.weather[0].description,\n  minTemp: formatTemp(data.temp.min),\n  maxTemp: formatTemp(data.temp.max),\n  precipitation: data.pop,\n  humidity: data.humidity\n}));","// container to display the weather for the city searched, pass down props from body to the weather component\n\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport Weather from '../Weather';\nimport { currentWeatherForecast, sevenDayForecast, capitalizeFirstLetter } from '../../utils/helpers';\n\nfunction Body() {\n  const [forecast, setForecast] = useState(null);\n  const [ currentCity, setCurrentCity ] = useState('');\n\n  useEffect(() => {\n    if(currentCity === '' || !currentCity) {\n      document.title = (\"Weather Dashboard\");      \n    }\n    document.title = (capitalizeFirstLetter(currentCity) + \" - Weather Dashboard\");\n  }, [currentCity]);\n\n  var apiKey = \"e8e23b4a156b56df078fbb140bab8322\";\n\n  const getCoord = async city => {\n    const coordAPI = \"https://api.openweathermap.org/data/2.5/weather?q=\" + city + \"&appid=\" + apiKey;\n    const { data } = await axios(coordAPI);\n\n    if(!data || data.length === 0) {\n      console.log(\"error\");\n    };\n    return data;\n}\n\n  const getForecast = async (lat, lon) => {\n    const weatherAPI = 'https://api.openweathermap.org/data/2.5/onecall?lat=' + lat + '&lon=' + lon + '&exclude=minutely,alerts&appid=' + apiKey;\n    const { data } = await axios(weatherAPI);\n\n    if(!data || data.length === 0) {\n      console.log(\"error\");\n    };\n\n    return data;\n  };\n\n  const displayForecast = async data => {\n    const currentForecast = await currentWeatherForecast(data);\n    const weekForecast = await sevenDayForecast(data);\n\n    setForecast({ currentForecast, weekForecast });\n  };\n\n  const searchCity = async event => {\n    event.preventDefault();\n    if (!currentCity || currentCity === '') {\n      console.log(\"error\");\n    }\n    const res = await getCoord(currentCity);\n    const weather = await getForecast(res.coord.lat, res.coord.lon);\n\n    displayForecast(weather);\n    \n    const totalForecast = await forecast;\n    console.log(totalForecast);\n  }\n\n  return (\n    <div>\n      <form onSubmit={searchCity}>\n        <input\n          type=\"text\"\n          className=\"\"\n          placeholder=\"Enter City Name\"\n          id=\"city-name\"\n          value={currentCity}\n          onChange={(event => setCurrentCity(event.target.value))}\n        />\n        <button\n          className=\"btn btn-primary\"\n          type=\"submit\"\n          onClick={searchCity}\n        >Search</button>\n      </form>\n\n      <div>\n      {/* add weather forecast based on search, using weather component to build each card for the 7 days */}\n        {forecast && <Weather forecast={forecast} />}\n      </div>\n    </div>\n  );\n}\n\nexport default Body;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Body from './components/Body';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <main>\n        <Body />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\nserviceWorkerRegistration.register();"],"sourceRoot":""}